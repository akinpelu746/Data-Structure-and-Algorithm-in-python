
def Max_Heapify(A,i,A_heap_size):
    left = 2*i+1
    right = 2*i+2
    if (left<=A_heap_size and A[i] < A[left] ):
        largest = left
    else:
        largest = i
    if ( right<=A_heap_size and A[largest] < A[right] ):
        largest = right
    if (largest != i):
        (A[i],A[largest]) = (A[largest],A[i])
        Max_Heapify(A,largest,A_heap_size)

def Build_Heap(A):
    A_heap_size = len(A)-1
    for i in range (int(A_heap_size/2),-1,-1):
        Max_Heapify(A,i,A_heap_size)
    return (A,A_heap_size)

def Heap_Sort(A):
    (A, A_heap_size) = Build_Heap(A)
    for i in range(len(A)-1,0,-1):
        (A[0],A[A_heap_size]) = (A[A_heap_size],A[0])
        A_heap_size = A_heap_size-1
        Max_Heapify(A,0,A_heap_size)
    return  A

def Extract_Max(A):
    (A, A_heap_size) =  Build_Heap(A)
    Max = A[0]
    (A[0], A[A_heap_size]) = (A[A_heap_size], A[0])
    A_heap_size = A_heap_size - 1
    Max_Heapify(A,0,A_heap_size)
    return Max
print(Heap_Sort([12,45,2,67,45,34]))

